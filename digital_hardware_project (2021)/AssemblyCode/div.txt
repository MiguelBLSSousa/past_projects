MOVE, r0, r3
MOVE, r0, r4
GEN, 1
MOVE, r63, tempB1
GEN, 15 
MOVE, r63, tempB2
MOVE, r1, tempB3 //move r1 to tempB3 so in between subtracts can be saved
TCMP r2
MOVE r63 tempB4 //save inverse of r2
SFTR tempB3, tempB2 --jump2B
ADD, r63, tempB4 //check if divisor is bigger than the selection of the dividend
BSB, N, --jump1B
//if its bigger, subtraction happens and a 1 shifted tempB2 amount of shifted 1 is added to DIV result
SFTL, tempB1, tempB2
ADD, r3, r63
MOVE, r63, r3 //add to DIV result
SFTL, tempB4, tempB2
ADD, tempB3, r63
MOVE, r63, tempB3 //subtract from dividend
MOVE, tempB3, r4
ADD tempB2, r0 --jump1B
BSB, Z, [Bout] //branch out when we shift 0 to the right
MOVE r63, tempB2
//subrtact 1 from tempB2 and then jump back
TCMP, tempB1
ADD, tempB2, r63
MOVE, r63, tempB2
BA, --jump2B


--add escape branch

-----------
x div y = z
x mod y = w

x r1
y r2
z r3
w r4

00000110|00101010
		 0   | | 
		 0-  | | 
		 00  | |
		  0- | |
		 001 | |
		   0-| |
		 0010| |
			0- |
		 00101 |
		     0-|
		 001010|
		    110-	100
		   ----|
		 000100|
		 0001001	100
			 110-	 10+
			----	---
		 0000011	110
		 00000110	  1+
			  110-	---			  
			  ---   111 => div output
		 00000000 => MODULO output
		   

--------+


LOAD,	%M,	%r
STORE,	%M,	%r           
MOVE,	%rs1,	%rs2       
OR,	%rs1,	%rs2      
AND,	%rs1,	%rs2      
ADD,	%rs1,	%rs2
INV,	%rs1        
TCMP,	%rs1              
ST,	%rs1,	%rs2
SFT,	%rs1,	%rs2         
BA,	X   
BSB,	Z,	X
BSB,	N,	X            
BSB,	C,	X             
BSB,	O,	X             

