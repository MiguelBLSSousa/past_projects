BA, --jump1F
MOVE, r63, tempB1
GEN, 15 
MOVE, r63, tempB2
MOVE, r1, tempB3 //move r1 to tempB3 so in between subtracts can be saved
TCMP r2
MOVE r63 tempB4 //save inverse of r2
SFTR tempB3, tempB2 --jump2B
ADD, r63, tempB4 //check if divisor is bigger than the selection of the dividend
BSB, N, --jump1B
//if its bigger, subtraction happens and a 1 shifted tempB2 amount of shifted 1 is added to DIV result
SFTL, tempB1, tempB2
ADD, r3, r63
MOVE, r63, r3 //add to DIV result
SFTL, tempB4, tempB2
ADD, tempB3, r63
MOVE, r63, tempB3 //subtract from dividend
MOVE, tempB3, r4
ADD tempB2, r0 --jump1B
BSB, Z, [Bout] //branch out when we shift 0 to the right
MOVE r63, tempB2
//subrtact 1 from tempB2 and then jump back
TCMP, tempB1
ADD, tempB2, r63
MOVE, r63, tempB2
BA, --jump2B

MOVE, r63, tempD4
GEN 2047 //max address you want to sort
TCMP 2047
MOVE r63 tempD5
MOVE, r0, tempD1
MOVE, r0, tempD2
LOAD, tempD2, tempD3 --jump2D
OR, r0, tempD3
BSB, Z, --jump1D
STORE, tempD1, tempD3
ADD, tempD1, tempD4
MOVE, r63, tempD1 //increase empty address when moving value into it
ADD, tempD2, tempD4 --jump1D //increase current address
MOVE, r63, tempD2 //check if 
ADD, tempD2, tempD5
BSB, N, [Dout]
BA, --jump2D

--jump1F
GEN 1
MOVE, r63, tempC1
GEN 2
MOVE, r63, tempC2
GEN 3
MOVE, r63, tempC3
MOVE, tempC2, tempC4 //tempC4 address t1
ADD, tempC2, tempC2
MOVE, r63, tempC5 //tempC 5 value t2
GEN #maxAddress
TCMP tempC6
MOVE, r63, tempC6
tempC4 mod tempC2--jump2C
BSB z --jump1C
tempC4 mod tempC3
BSB Z --jump1C
MOVE, tempC5, r59
STORE, tempC4, r59
ADD tempC4, tempC1
ADD, tempC5, tempC1--jump1C
BSB, N, [Cout]
BA --jump2C
***StoreNonMultiplesOf2And3
GEN 1
MOVE, r63, tempE1
GEN 1
MOVE, r63, tempE2
GEN 500
TCMP, r63
MOVE, r63, tempE3
LOAD, tempE2, tempE5
ADD, tempE2, tempE1 --jump 5E
MOVE, r63, tempE2 
ADD, tempE2, tempE3
BSB, Z, [Eout]
MOVE, tempE2, tempE4
LOAD, tempE4, tempE6 --jump4E
OR, tempE6, r0
BSB, Z, --jump1E //jump out of loop if value is 0(meaning last entry in main memory)
MOVE, tempE6, r1
MOVE, tempE5, r2
***Modulo function
OR, r4, r0
BSB, Z, --jump2E
BA --jump3E
MOVE, r0, tempE6 --jump2E
STORE, tempE4, tempE6 --jump3E
ADD, tempE4, tempE1
MOVE, r63, tempE4
BA --jump4E
***ReconstructMainMemory
BA, --jump5E

---------------------
LOAD,	%rs1,	%rs2
STORE,	%rs1,	%rs2           
MOVE,	%rs1,	%rs2       
OR,		%rs1,	%rs2      
AND,	%rs1,	%rs2      
ADD,	%rs1,	%rs2
INV,	%rs1        
TCMP,	%rs1              
ST,		%rs1,	%rs2
SFT,	%rs1,	%rs2         
BA,		%rs1   
BSB,	Z,		%rs1
BSB,	N,		%rs1           
BSB,	C,		%rs1            
BSB,	O,		%rs1            
GEN		X[11 bits]